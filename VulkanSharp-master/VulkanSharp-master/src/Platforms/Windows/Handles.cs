/* Please note that this file is generated by the VulkanSharp's generator. Do not edit directly.

   Licensed under the MIT license.

   Copyright 2016 Xamarin Inc

   This notice may not be removed from any source distribution.
   See LICENSE file for licensing details.
*/

using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Vulkan.Windows
{
	public static class InstanceExtension
	{
		public static SurfaceKhr CreateWin32SurfaceKHR (this Instance instance, Win32SurfaceCreateInfoKhr pCreateInfo, AllocationCallbacks pAllocator = null)
		{
			Result result;
			SurfaceKhr pSurface;
			unsafe {
				pSurface = new SurfaceKhr ();

				fixed (UInt64* ptrpSurface = &pSurface.m) {
					result = Windows.Interop.NativeMethods.vkCreateWin32SurfaceKHR (instance.m, pCreateInfo != null ? pCreateInfo.m : (Windows.Interop.Win32SurfaceCreateInfoKhr*)default(IntPtr), pAllocator != null ? pAllocator.m : null, ptrpSurface);
				}
				if (result != Result.Success)
					throw new ResultException (result);

				return pSurface;
			}
		}
	}

	public static class PhysicalDeviceExtension
	{
		public static Bool32 GetWin32PresentationSupportKHR (this PhysicalDevice physicalDevice, UInt32 queueFamilyIndex)
		{
			unsafe {
				return Windows.Interop.NativeMethods.vkGetPhysicalDeviceWin32PresentationSupportKHR (physicalDevice.m, queueFamilyIndex);
			}
		}
	}

	public static class DeviceExtension
	{
		public static IntPtr GetMemoryWin32HandleNV (this Device device, DeviceMemory memory, ExternalMemoryHandleTypeFlagsNv handleType)
		{
			Result result;
			IntPtr pHandle;
			unsafe {
				pHandle = new IntPtr ();
				result = Windows.Interop.NativeMethods.vkGetMemoryWin32HandleNV (device.m, memory != null ? memory.m : default(UInt64), handleType, &pHandle);
				if (result != Result.Success)
					throw new ResultException (result);

				return pHandle;
			}
		}
	}

}
